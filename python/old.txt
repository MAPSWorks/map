## DataType

NONE_DATATYPE = 0x00
F32 = 0x01
F64 = 0x02
B8  = 0x03
U8  = 0x04
U16 = 0x05
U32 = 0x06
U64 = 0x07
S8  = 0x08
S16 = 0x09
S32 = 0x0A
S64 = 0x0B
N_DATATYPE = 0x0C

## NumDim

NONE_NUMDIM = 0x00
TIME = 0x01
D0 = 0x02
D1 = 0x04
D2 = 0x06
D3 = 0x08
N_NUMDIM = 0x0A

## MemOrder

NONE_MEMORDER = 0x00
BLK = 0x01
ROW = 0x02

## Unary

NONE_UNARY = 0x00
POS = 0x01
NEG = 0x02
NOT = 0x03
bNOT = 0x04
MARK_UNARY = 0x05
SIN = 0x06
COS = 0x07
TAN = 0x08
ASIN = 0x09
ACOS = 0x0A
ATAN = 0x0B
SINH = 0x0C
COSH = 0x0D
TANH = 0x0E
ASINH = 0x0F
ACOSH = 0x10
ATANH = 0x11
EXP = 0x12
EXP2 = 0x13
EXP10 = 0x14
LOG = 0x15
LOG2 = 0x16
LOG10 = 0x17
SQRT = 0x18
CBRT = 0x19
ABS = 0x1A
CEIL = 0x1B
FLOOR = 0x1C
TRUNC = 0x1D
ROUND = 0x1E
N_UNARY = 0x1F

## Binary

NONE_BINARY = 0x00
ADD = 0x01
SUB = 0x02
MUL = 0x03
DIV = 0x04
EQ = 0x06
NE = 0x07
LT = 0x08
GT = 0x09
LE = 0x0A
GE = 0x0B
ATAN2 = 0x16
POW = 0x17

## Reduction

NONE_REDUCTION = 0x00
SUM  = 0x01
PROD = 0x02
MAX  = 0x06
MIN  = 0x07

##

def __add__(self,other):
	other = self._raster_or_const(other)
	return Raster( _lib.ma_binary(self,other,ADD) )

def __radd__(self,other):
	When 'other' has defined _add__, which is called?
	other = self._raster_or_const(other)
	return Raster( _lib.ma_binary(other,self,ADD) )

def __iadd__(self,other):
	return self + other

def __sub__(self,other):
	other = self._raster_or_const(other)
	return Raster( _lib.ma_binary(self,other,SUB) )

def __rsub__(self,other):
	other = self._raster_or_const(other)
	return Raster( _lib.ma_binary(other,self,SUB) )

def __isub__(self,other):
	return self - other

def __mul__(self,other):
	other = self._raster_or_const(other)
	return Raster( _lib.ma_binary(self,other,MUL) )

def __rmul__(self,other):
	other = self._raster_or_const(other)
	return Raster( _lib.ma_binary(other,self,MUL) )

def __imul__(self,other):
	return self * other

def __div__(self,other):
	other = self._raster_or_const(other)
	return Raster( _lib.ma_binary(self,other,DIV) )

def __rdiv__(self,other):
	other = self._raster_or_const(other)
	return Raster( _lib.ma_binary(other,self,DIV) )

def __idiv__(self,other):
	return self / other

def __pow__(self,other):
	other = self._raster_or_const(other)
	return Raster( _lib.ma_binary(self,other,POW) )

def __rpow__(self,other):
	other = self._raster_or_const(other)
	return Raster( _lib.ma_binary(other,self,POW) )

def __ipow__(self,other):
	return self

def __eq__(self,other):
	other = self._raster_or_const(other)
	return Raster( _lib.ma_binary(self,other,EQ) )

def __ne__(self,other):
	other = self._raster_or_const(other)
	return Raster( _lib.ma_binary(self,other,NE) )

def __lt__(self,other):
	other = self._raster_or_const(other)
	return Raster( _lib.ma_binary(self,other,LT) )

def __gt__(self,other):
	other = self._raster_or_const(other)
	return Raster( _lib.ma_binary(self,other,GT) )

def __le__(self,other):
	other = self._raster_or_const(other)
	return Raster( _lib.ma_binary(self,other,LE) )

def __ge__(self,other):
	other = self._raster_or_const(other)
	return Raster( _lib.ma_binary(self,other,GE) )
		
def atan2(lhs,rhs):
	lhs = _raster_or_const(lhs)
	rhs = _raster_or_const(rhs)
	return Raster( _lib.ma_binary(lhs,rhs,ATAN2) )
